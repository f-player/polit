export function Chat() {
    const html = `
      <div id="chat-window">
        <div id="chat-header">–ß–∞—Ç</div>
        <div id="chat-messages"></div>
        <input type="text" id="chat-input" placeholder="–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å...">
      </div>
      <div>
        <div class="yButtonWave" style="border-color: rgba(172, 142, 88, 0.849); color: rgba(172, 142, 88, 0.849);"></div>
        <div>
          <button id="btn_mainr" class="my-btn">–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å</button>
        </div>
      </div>
    `;
  
    async function loadDB() {
      const response = await fetch('./db/questions.json');
      const db = await response.json();
      return db;
    }
  
    function initializeChatScripts(container) {
      console.log("[Chat Init] üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤ —á–∞—Ç–∞...");
  
      if (!container) {
        console.error("[Chat Init] ‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω!");
        return;
      }
      console.log("[Chat Init] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ:", container);
  
      const chatButton = container.querySelector('#btn_mainr');
      const chatWindow = container.querySelector('#chat-window');
      const chatInput = container.querySelector('#chat-input');
      const chatMessages = container.querySelector('#chat-messages');
  
      if (!chatButton) console.error("[Chat Init] ‚ùå –ö–Ω–æ–ø–∫–∞ —á–∞—Ç–∞ #btn_mainr –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –í–ù–£–¢–†–ò –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞!");
      if (!chatWindow) console.error("[Chat Init] ‚ùå –û–∫–Ω–æ —á–∞—Ç–∞ #chat-window –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –í–ù–£–¢–†–ò –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞!");
      if (!chatInput) console.error("[Chat Init] ‚ùå –ü–æ–ª–µ –≤–≤–æ–¥–∞ #chat-input –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –í–ù–£–¢–†–ò –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞!");
      if (!chatMessages) console.error("[Chat Init] ‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π #chat-messages –Ω–µ –Ω–∞–π–¥–µ–Ω –í–ù–£–¢–†–ò –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞!");
  
      if (!chatButton || !chatWindow || !chatInput || !chatMessages) {
        console.error("[Chat Init] üõë –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤.");
        return;
      }
  
      console.log("[Chat Init] ‚úÖ –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —á–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω—ã –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.");
  
      const storageKey = 'chatHistory';
      let messages = [];
  
      function loadChatHistory() {
        const savedHistory = localStorage.getItem(storageKey);
        console.log("[Chat Load] –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:", savedHistory);
        if (savedHistory) {
          try {
            messages = JSON.parse(savedHistory);
            console.log("[Chat Load] –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", JSON.stringify(messages));
            console.log(`[Chat Load] –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π.`);
  
            chatMessages.innerHTML = '';
  
            messages.forEach(msg => {
              addMessage(msg.sender, msg.text, false);
            });
          } catch (e) {
            console.error("[Chat Load] ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞. –î–∞–Ω–Ω—ã–µ:", savedHistory, "–û—à–∏–±–∫–∞:", e);
            messages = [];
            localStorage.removeItem(storageKey);
          }
        } else {
          console.log("[Chat Load] –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –≤ localStorage –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
        }
      }
  
      function saveChatHistory() {
        console.log(`[Chat Save] –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π. –¢–µ–∫—É—â–∏–π –º–∞—Å—Å–∏–≤:`, JSON.stringify(messages));
        try {
          localStorage.setItem(storageKey, JSON.stringify(messages));
          console.log("[Chat Save] ‚úÖ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.");
        } catch (e) {
          console.error("[Chat Save] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –≤ localStorage:", e);
        }
      }
  
      chatButton.addEventListener('click', () => {
        const isHidden = chatWindow.style.display === 'none' || chatWindow.style.display === '';
        chatWindow.style.display = isHidden ? 'block' : 'none';
        console.log(`[Chat Button Click] –û–∫–Ω–æ —á–∞—Ç–∞ ${isHidden ? '–æ—Ç–∫—Ä—ã—Ç–æ' : '–∑–∞–∫—Ä—ã—Ç–æ'}.`);
        if (isHidden) {
          chatInput.focus();
          autoScroll();
        }
      });
  
      chatInput.addEventListener('keypress', async (event) => {
        if (event.key === 'Enter') {
          const messageText = chatInput.value.trim();
          if (messageText !== '') {
            addMessage('user', messageText);
            chatInput.value = '';
            autoScroll();
  
            const aiResponse = await generateAIResponse(messageText);
            addMessage('ai', aiResponse);
            autoScroll();
          }
        }
      });
  
      function addMessage(sender, text, save = true) {
        console.log(`[Chat AddMessage] –í—ã–∑–≤–∞–Ω–∞ —Å sender=${sender}, save=${save}, text="${text}"`);
  
        const messageElement = document.createElement('div');
        messageElement.className = `chat-message ${sender}-message`;
  
        const icon = document.createElement('img');
        if (sender === 'user') {
          icon.src = '../image/user-icon.png';
          icon.className = 'user-icon chat-icon';
          icon.alt = 'User';
        } else {
          icon.src = '../image/ai-icon.png';
          icon.className = 'ai-icon chat-icon';
          icon.alt = 'AI';
        }
        messageElement.appendChild(icon);
  
        const textElement = document.createElement('div');
        textElement.className = 'message-text';
        textElement.textContent = text;
        messageElement.appendChild(textElement);
  
        if (chatMessages) {
          chatMessages.appendChild(messageElement);
  
          if (save) {
            const newMessage = { sender: sender, text: text };
            messages.push(newMessage);
            console.log("[Chat AddMessage] –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –º–∞—Å—Å–∏–≤. –í—ã–∑—ã–≤–∞—é saveChatHistory...");
            saveChatHistory();
          }
        } else {
          console.error("[Chat AddMessage] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: —ç–ª–µ–º–µ–Ω—Ç chatMessages –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        }
      }
  
      function sanitizeInput(input) {
        return input.replace(/[^\w\s,.!?–∞-—è–ê-–Ø—ë–Å]/g, '');
      }
  
      async function generateAIResponse(userMessage) {
        const db = await loadDB();
        if (!db.questions || !Array.isArray(db.questions) || !db.smallTalk || !Array.isArray(db.smallTalk)) {
          console.error('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
          return '–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ';
        }
  
        const sanitizedMessage = sanitizeInput(userMessage);
  
        const allEntries = [...db.questions.map(q => ({ input: q.question, response: q.answer })), ...db.smallTalk];
  
        const match = allEntries.find(entry => entry.input.toLowerCase().includes(sanitizedMessage.toLowerCase()));
        if (match) {
          return match.response;
        }
  
        return '–Ø –ø–æ–∫–∞ —É—á—É—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å.';
      }
  
      function autoScroll() {
        if (chatMessages) {
          chatMessages.scrollTop = chatMessages.scrollHeight;
        }
      }
  
      loadChatHistory();
      autoScroll();
  
      console.log("[Chat Init] ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤ —á–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
    }
  
    return {
      html: html,
      init: initializeChatScripts
    };
  }
  